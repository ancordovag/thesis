sudoku = {"problem": '''The task of this project is to solve a Sudoku puzzle using ASP. The goal of the game is to fill a 9x9 grid with digits so that each column, each row and each of the nine 3x3 sub-grids that compose the grid contains all numbers from 1 to 9. In other words, the grid has to be filled with numbers from 1 to 9 so that the same number does not appear twice in the same row, column or in any of the nine 3x3 sub-grids of the 9x9 playing board. Initially the grid is partially filled.''',
"representation": '''The initial state of the grid is represented by facts of predicate initial/3: 
initial(X,Y,N). % initially cell [X,Y] contains number N
The solution is represented by atoms of predicate sudoku/3:
sudoku(X,Y,N). % the cell [X,Y] contains number N''',
"instance" : "initial(1,1,5). initial(1,2,3). initial(1,5,7).
initial(2,1,6). initial(2,4,1). initial(2,5,9). initial(2,6,5).
initial(3,2,9). initial(3,3,8). initial(3,8,6).
initial(4,1,8). initial(4,5,6). initial(4,9,3).
initial(5,1,4). initial(5,4,8). initial(5,6,3). initial(5,9,1).
initial(6,1,7). initial(6,5,2). initial(6,9,6).
initial(7,2,6). initial(7,7,2). initial(7,8,8).
initial(8,4,4). initial(8,5,1). initial(8,6,9). initial(8,9,5).
initial(9,5,8). initial(9,8,7). initial(9,9,9).",
"rules": "%% Definition
#const s=3.
subgrid_size(s).
value(1..s*s).
row(1..s*s).
column(1..s*s).
cell(X,Y) :- row(X), column(Y) .


%% Initialization
:- initial(X,Y,V), not sudoku(X,Y,V).


%% Generation
1 {sudoku(X,Y,V) : value(V) }  :- cell(X,Y).


%% Test
% No 2 values in the same cell
:- sudoku(X,Y,V), sudoku(X,Y,Z), V!=Z.

% No repetition in the column
:- sudoku(X,Y,V), sudoku(X,Y',V), Y!=Y'.

% No repetition in the row
:- sudoku(X,Y,V), sudoku(X',Y,V), X!=X'.

% No repetition in the subgrid
map(X,Y,S) :- cell(X,Y), S=(((X-1)/s)*s + (Y-1)/s).
:- sudoku(X,Y,V), sudoku(X',Y',V), X'!=X, Y != Y', cell(X,Y), cell(X',Y'), map(X,Y,S), map(X',Y',S)."
}
