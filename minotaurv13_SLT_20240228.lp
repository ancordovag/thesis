% The possible next movements of the player "next" of 4 variables, are defined as 2 adjacent fields, with "field" predicate of 2 variables, that do not have a "wall" (4 variables) between them)          next(X1, Y1, X2, Y2) :- field(X1, Y1), field(X2, Y2), adjacent(X1, Y1, X2, Y2), not wall(X1, Y1, X2, Y2).            % A "field" is "next" to itself next(X, Y, X, Y) :- field(X, Y).            % If a field is next to another, then this second one is next to the first onenext(X2, Y2, X1, Y1) :- next(X1, Y1, X2, Y2).            % The player, "at" 3 variables, is at start position "start" 2 Variables, at timestep 0at(player, X, Y, 0) :- start(X, Y).            % The player chooses only one position from the possible "next" fields if it is not at the "goal" 2 variables, and the timestem T is less than the max steps S "maxsteps".1 {at(player, X2, Y2, T+1) : next(X1, Y1, X2, Y2)} 1 :- at(player, X1, Y1, T), not goal(X1, Y1), T < maxsteps.            % The minotaurs movements "mino_step" 5 variables depending of the possible "next" movement of the player.     mino_step(X1, Y1, X2, Y2, T) :- next(X1, Y1, X2, Y2), at(minotaur, X1, Y1, T).            % The minotaur's next position as the actual position plus the minotaur's movementat(minotaur, X2, Y2, T+1) :- at(minotaur, X1, Y1, T), mino_step(X1, Y1, X2, Y2, T).            % The minotaur is at the minotaur's start position at timestep 0at(minotaur, X, Y, 0) :- minotaur_start(X, Y).            % The minotaur's next position depending on the actual position and the next position of the playermino_step(X1, Y1, X2, Y2, T) :- at(minotaur, X1, Y1, T), next(X1, Y1, X2, Y2), at(player, X2, Y2, T+1).            % The player and the minotaur can not be at the same cell at the same time        :- at(player, X, Y, T), at(minotaur, X, Y, T).            % The goal is achieved when the player is at cell goalgoal_reached(T) :- at(player, X, Y, T), goal(X, Y).            % It can not be the case, that the goal is not achieved:- not goal_reached(T).            % Optimization: minimize the time T            #minimize {T : goal_reached(T)}.            % Show output predicate#show at/4.