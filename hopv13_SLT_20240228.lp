% Given C columns defined in atom column(C) and R rows in "rows(R)", the predicate "cell" has all the combinations of column and rowcell(C, R) :- column(C), row(R).% Given the predicate "start" of two dimensions showing a position, the predicate "step" has the same position in the time 0.step(0, X, Y) :- start(X, Y).% The possible hops are generated through the predicate "hop" of 2 variables, with possible values between -3 and 3. One of the variables should always be 0, and "hop(0,0)" does not existhop(DX, DY) :- DX != 0, DY = 0, DX = -3..3.
hop(DX, DY) :- DX = 0, DY != 0, DY = -3..3.
:- hop(0, 0).% If a "step" is not the last step defined as "numstep(S)", then a new "step" is generated as the current position of the "step" plus a "hop". Only one next "step" is allowed.1 {step(S+1, X+DX, Y+DY) : hop(DX, DY)} 1 :- step(S, X, Y), numstep(NS), S < NS.% The predicate "actual_hop" of 3 variables shows the difference in position of the last 2 steps.actual_hop(S, DX, DY) :- step(S, X, Y), step(S-1, X1, Y1), DX = X - X1, DY = Y - Y1.% It cannot be that the absolute value of the sum of variable positions of "actual_hop" in timestep 1 is bigger than 1:- actual_hop(1, DX, DY), abs(DX + DY) > 1.% If last hop was length 1, it cannot be that the absolute value of the sum of variable positions of "actual_hop" is not 2:- actual_hop(S, DX1, DY1), abs(DX1 + DY1) = 1, actual_hop(S+1, DX2, DY2), abs(DX2 + DY2) != 2.% If last hop was length 2, it cannot be that the absolute value of the sum of variable positions of "actual_hop" is not 3:- actual_hop(S, DX1, DY1), abs(DX1 + DY1) = 2, actual_hop(S+1, DX2, DY2), abs(DX2 + DY2) != 3.% If last hop was length 3, it cannot be that the absolute value of the sum of variable positions of "actual_hop" is not 1:- actual_hop(S, DX1, DY1), abs(DX1 + DY1) = 3, actual_hop(S+1, DX2, DY2), abs(DX2 + DY2) != 1.% The predicate "visited" of 2 variables keeps the position of each stepvisited(X, Y) :- step(_, X, Y).% Every dot must be visited:- dot(X, Y), not visited(X, Y).% The goal must be visited:- goal(X, Y), not visited(X, Y).% Cannot step a cell twice:- step(S1, X, Y), step(S2, X, Y), S1 != S2.% Cannot step into a cell after stepping in goal:- step(S1, X, Y), goal(XG, YG), step(S2, XG, YG), S1 > S2.%Show output predicate "step"#show step/3.